// This code was autogenerated with `dbus-codegen-rust -i org.freedesktop.NetworkManager. -c nonblock -m None -f Connection.Active, --dbuscrate ::dbus -o connection_active.rs`, see https://github.com/diwic/dbus-rs
use ::dbus;
use ::dbus::arg;
use ::dbus::nonblock;

pub trait ConnectionActive {
    fn connection(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn specific_object(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn id(&self) -> nonblock::MethodReply<String>;
    fn uuid(&self) -> nonblock::MethodReply<String>;
    fn type_(&self) -> nonblock::MethodReply<String>;
    fn devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn state(&self) -> nonblock::MethodReply<u32>;
    fn state_flags(&self) -> nonblock::MethodReply<u32>;
    fn default(&self) -> nonblock::MethodReply<bool>;
    fn ip4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn dhcp4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn default6(&self) -> nonblock::MethodReply<bool>;
    fn ip6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn dhcp6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn vpn(&self) -> nonblock::MethodReply<bool>;
    fn master(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> ConnectionActive
    for nonblock::Proxy<'a, C>
{
    fn connection(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Connection",
        )
    }

    fn specific_object(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "SpecificObject",
        )
    }

    fn id(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Id",
        )
    }

    fn uuid(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Uuid",
        )
    }

    fn type_(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Type",
        )
    }

    fn devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Devices",
        )
    }

    fn state(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "State",
        )
    }

    fn state_flags(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "StateFlags",
        )
    }

    fn default(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Default",
        )
    }

    fn ip4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Ip4Config",
        )
    }

    fn dhcp4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Dhcp4Config",
        )
    }

    fn default6(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Default6",
        )
    }

    fn ip6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Ip6Config",
        )
    }

    fn dhcp6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Dhcp6Config",
        )
    }

    fn vpn(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Vpn",
        )
    }

    fn master(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Connection.Active",
            "Master",
        )
    }
}

#[derive(Debug)]
pub struct ConnectionActivePropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for ConnectionActivePropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for ConnectionActivePropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ConnectionActivePropertiesChanged {
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ConnectionActivePropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Connection.Active";
}

#[derive(Debug)]
pub struct ConnectionActiveStateChanged {
    pub state: u32,
    pub reason: u32,
}

impl arg::AppendAll for ConnectionActiveStateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.state, i);
        arg::RefArg::append(&self.reason, i);
    }
}

impl arg::ReadAll for ConnectionActiveStateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ConnectionActiveStateChanged {
            state: i.read()?,
            reason: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ConnectionActiveStateChanged {
    const NAME: &'static str = "StateChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Connection.Active";
}
