// This code was autogenerated with `dbus-codegen-rust -i org.freedesktop. -c nonblock -m None -f NetworkManager --dbuscrate ::dbus -o networkmanager.rs`, see https://github.com/diwic/dbus-rs
use ::dbus;
use ::dbus::arg;
use ::dbus::nonblock;

pub trait NetworkManager {
    fn reload(&self, flags: u32) -> nonblock::MethodReply<()>;
    fn get_devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn get_all_devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn get_device_by_ip_iface(&self, iface: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn activate_connection(
        &self,
        connection: dbus::Path,
        device: dbus::Path,
        specific_object: dbus::Path,
    ) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn add_and_activate_connection(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        device: dbus::Path,
        specific_object: dbus::Path,
    ) -> nonblock::MethodReply<(dbus::Path<'static>, dbus::Path<'static>)>;
    fn add_and_activate_connection2(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        device: dbus::Path,
        specific_object: dbus::Path,
        options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> nonblock::MethodReply<(
        dbus::Path<'static>,
        dbus::Path<'static>,
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    )>;
    fn deactivate_connection(&self, active_connection: dbus::Path) -> nonblock::MethodReply<()>;
    fn sleep(&self, sleep: bool) -> nonblock::MethodReply<()>;
    fn enable(&self, enable: bool) -> nonblock::MethodReply<()>;
    fn get_permissions(&self)
        -> nonblock::MethodReply<::std::collections::HashMap<String, String>>;
    fn set_logging(&self, level: &str, domains: &str) -> nonblock::MethodReply<()>;
    fn get_logging(&self) -> nonblock::MethodReply<(String, String)>;
    fn check_connectivity(&self) -> nonblock::MethodReply<u32>;
    fn state(&self) -> nonblock::MethodReply<u32>;
    fn checkpoint_create(
        &self,
        devices: Vec<dbus::Path>,
        rollback_timeout: u32,
        flags: u32,
    ) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn checkpoint_destroy(&self, checkpoint: dbus::Path) -> nonblock::MethodReply<()>;
    fn checkpoint_rollback(
        &self,
        checkpoint: dbus::Path,
    ) -> nonblock::MethodReply<::std::collections::HashMap<String, u32>>;
    fn checkpoint_adjust_rollback_timeout(
        &self,
        checkpoint: dbus::Path,
        add_timeout: u32,
    ) -> nonblock::MethodReply<()>;
    fn devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn all_devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn checkpoints(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn networking_enabled(&self) -> nonblock::MethodReply<bool>;
    fn wireless_enabled(&self) -> nonblock::MethodReply<bool>;
    fn set_wireless_enabled(&self, value: bool) -> nonblock::MethodReply<()>;
    fn wireless_hardware_enabled(&self) -> nonblock::MethodReply<bool>;
    fn wwan_enabled(&self) -> nonblock::MethodReply<bool>;
    fn set_wwan_enabled(&self, value: bool) -> nonblock::MethodReply<()>;
    fn wwan_hardware_enabled(&self) -> nonblock::MethodReply<bool>;
    fn wimax_enabled(&self) -> nonblock::MethodReply<bool>;
    fn set_wimax_enabled(&self, value: bool) -> nonblock::MethodReply<()>;
    fn wimax_hardware_enabled(&self) -> nonblock::MethodReply<bool>;
    fn active_connections(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn primary_connection(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn primary_connection_type(&self) -> nonblock::MethodReply<String>;
    fn metered(&self) -> nonblock::MethodReply<u32>;
    fn activating_connection(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn startup(&self) -> nonblock::MethodReply<bool>;
    fn version(&self) -> nonblock::MethodReply<String>;
    fn capabilities(&self) -> nonblock::MethodReply<u32>;
    fn state_(&self) -> nonblock::MethodReply<u32>;
    fn connectivity(&self) -> nonblock::MethodReply<u32>;
    fn connectivity_check_available(&self) -> nonblock::MethodReply<bool>;
    fn connectivity_check_enabled(&self) -> nonblock::MethodReply<bool>;
    fn set_connectivity_check_enabled(&self, value: bool) -> nonblock::MethodReply<()>;
    fn global_dns_configuration(
        &self,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    >;
    fn set_global_dns_configuration(
        &self,
        value: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    ) -> nonblock::MethodReply<()>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> NetworkManager
    for nonblock::Proxy<'a, C>
{
    fn reload(&self, flags: u32) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.NetworkManager", "Reload", (flags,))
    }

    fn get_devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        self.method_call("org.freedesktop.NetworkManager", "GetDevices", ())
            .and_then(|r: (Vec<dbus::Path<'static>>,)| Ok(r.0))
    }

    fn get_all_devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        self.method_call("org.freedesktop.NetworkManager", "GetAllDevices", ())
            .and_then(|r: (Vec<dbus::Path<'static>>,)| Ok(r.0))
    }

    fn get_device_by_ip_iface(&self, iface: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "GetDeviceByIpIface",
            (iface,),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn activate_connection(
        &self,
        connection: dbus::Path,
        device: dbus::Path,
        specific_object: dbus::Path,
    ) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "ActivateConnection",
            (connection, device, specific_object),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn add_and_activate_connection(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        device: dbus::Path,
        specific_object: dbus::Path,
    ) -> nonblock::MethodReply<(dbus::Path<'static>, dbus::Path<'static>)> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "AddAndActivateConnection",
            (connection, device, specific_object),
        )
    }

    fn add_and_activate_connection2(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        device: dbus::Path,
        specific_object: dbus::Path,
        options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> nonblock::MethodReply<(
        dbus::Path<'static>,
        dbus::Path<'static>,
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    )> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "AddAndActivateConnection2",
            (connection, device, specific_object, options),
        )
    }

    fn deactivate_connection(&self, active_connection: dbus::Path) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "DeactivateConnection",
            (active_connection,),
        )
    }

    fn sleep(&self, sleep: bool) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.NetworkManager", "Sleep", (sleep,))
    }

    fn enable(&self, enable: bool) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.NetworkManager", "Enable", (enable,))
    }

    fn get_permissions(
        &self,
    ) -> nonblock::MethodReply<::std::collections::HashMap<String, String>> {
        self.method_call("org.freedesktop.NetworkManager", "GetPermissions", ())
            .and_then(|r: (::std::collections::HashMap<String, String>,)| Ok(r.0))
    }

    fn set_logging(&self, level: &str, domains: &str) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "SetLogging",
            (level, domains),
        )
    }

    fn get_logging(&self) -> nonblock::MethodReply<(String, String)> {
        self.method_call("org.freedesktop.NetworkManager", "GetLogging", ())
    }

    fn check_connectivity(&self) -> nonblock::MethodReply<u32> {
        self.method_call("org.freedesktop.NetworkManager", "CheckConnectivity", ())
            .and_then(|r: (u32,)| Ok(r.0))
    }

    fn state(&self) -> nonblock::MethodReply<u32> {
        self.method_call("org.freedesktop.NetworkManager", "state", ())
            .and_then(|r: (u32,)| Ok(r.0))
    }

    fn checkpoint_create(
        &self,
        devices: Vec<dbus::Path>,
        rollback_timeout: u32,
        flags: u32,
    ) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "CheckpointCreate",
            (devices, rollback_timeout, flags),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn checkpoint_destroy(&self, checkpoint: dbus::Path) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "CheckpointDestroy",
            (checkpoint,),
        )
    }

    fn checkpoint_rollback(
        &self,
        checkpoint: dbus::Path,
    ) -> nonblock::MethodReply<::std::collections::HashMap<String, u32>> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "CheckpointRollback",
            (checkpoint,),
        )
        .and_then(|r: (::std::collections::HashMap<String, u32>,)| Ok(r.0))
    }

    fn checkpoint_adjust_rollback_timeout(
        &self,
        checkpoint: dbus::Path,
        add_timeout: u32,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager",
            "CheckpointAdjustRollbackTimeout",
            (checkpoint, add_timeout),
        )
    }

    fn devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Devices",
        )
    }

    fn all_devices(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "AllDevices",
        )
    }

    fn checkpoints(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Checkpoints",
        )
    }

    fn networking_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "NetworkingEnabled",
        )
    }

    fn wireless_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "WirelessEnabled",
        )
    }

    fn wireless_hardware_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "WirelessHardwareEnabled",
        )
    }

    fn wwan_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "WwanEnabled",
        )
    }

    fn wwan_hardware_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "WwanHardwareEnabled",
        )
    }

    fn wimax_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "WimaxEnabled",
        )
    }

    fn wimax_hardware_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "WimaxHardwareEnabled",
        )
    }

    fn active_connections(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "ActiveConnections",
        )
    }

    fn primary_connection(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "PrimaryConnection",
        )
    }

    fn primary_connection_type(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "PrimaryConnectionType",
        )
    }

    fn metered(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Metered",
        )
    }

    fn activating_connection(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "ActivatingConnection",
        )
    }

    fn startup(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Startup",
        )
    }

    fn version(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Version",
        )
    }

    fn capabilities(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Capabilities",
        )
    }

    fn state_(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "State",
        )
    }

    fn connectivity(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "Connectivity",
        )
    }

    fn connectivity_check_available(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "ConnectivityCheckAvailable",
        )
    }

    fn connectivity_check_enabled(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "ConnectivityCheckEnabled",
        )
    }

    fn global_dns_configuration(
        &self,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    > {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager",
            "GlobalDnsConfiguration",
        )
    }

    fn set_wireless_enabled(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager",
            "WirelessEnabled",
            value,
        )
    }

    fn set_wwan_enabled(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager",
            "WwanEnabled",
            value,
        )
    }

    fn set_wimax_enabled(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager",
            "WimaxEnabled",
            value,
        )
    }

    fn set_connectivity_check_enabled(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager",
            "ConnectivityCheckEnabled",
            value,
        )
    }

    fn set_global_dns_configuration(
        &self,
        value: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    ) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager",
            "GlobalDnsConfiguration",
            value,
        )
    }
}

#[derive(Debug)]
pub struct NetworkManagerPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for NetworkManagerPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for NetworkManagerPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(NetworkManagerPropertiesChanged {
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for NetworkManagerPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
}

#[derive(Debug)]
pub struct NetworkManagerCheckPermissions {}

impl arg::AppendAll for NetworkManagerCheckPermissions {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for NetworkManagerCheckPermissions {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(NetworkManagerCheckPermissions {})
    }
}

impl dbus::message::SignalArgs for NetworkManagerCheckPermissions {
    const NAME: &'static str = "CheckPermissions";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
}

#[derive(Debug)]
pub struct NetworkManagerStateChanged {
    pub state: u32,
}

impl arg::AppendAll for NetworkManagerStateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.state, i);
    }
}

impl arg::ReadAll for NetworkManagerStateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(NetworkManagerStateChanged { state: i.read()? })
    }
}

impl dbus::message::SignalArgs for NetworkManagerStateChanged {
    const NAME: &'static str = "StateChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
}

#[derive(Debug)]
pub struct NetworkManagerDeviceAdded {
    pub device_path: dbus::Path<'static>,
}

impl arg::AppendAll for NetworkManagerDeviceAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.device_path, i);
    }
}

impl arg::ReadAll for NetworkManagerDeviceAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(NetworkManagerDeviceAdded {
            device_path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for NetworkManagerDeviceAdded {
    const NAME: &'static str = "DeviceAdded";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
}

#[derive(Debug)]
pub struct NetworkManagerDeviceRemoved {
    pub device_path: dbus::Path<'static>,
}

impl arg::AppendAll for NetworkManagerDeviceRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.device_path, i);
    }
}

impl arg::ReadAll for NetworkManagerDeviceRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(NetworkManagerDeviceRemoved {
            device_path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for NetworkManagerDeviceRemoved {
    const NAME: &'static str = "DeviceRemoved";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager";
}
