// This code was autogenerated with `dbus-codegen-rust -i org.freedesktop.NetworkManager. -c nonblock -m None -f AccessPoint, --dbuscrate ::dbus -o access_point.rs`, see https://github.com/diwic/dbus-rs
use ::dbus;
use ::dbus::arg;
use ::dbus::nonblock;

pub trait AccessPoint {
    fn flags(&self) -> nonblock::MethodReply<u32>;
    fn wpa_flags(&self) -> nonblock::MethodReply<u32>;
    fn rsn_flags(&self) -> nonblock::MethodReply<u32>;
    fn ssid(&self) -> nonblock::MethodReply<Vec<u8>>;
    fn frequency(&self) -> nonblock::MethodReply<u32>;
    fn hw_address(&self) -> nonblock::MethodReply<String>;
    fn mode(&self) -> nonblock::MethodReply<u32>;
    fn max_bitrate(&self) -> nonblock::MethodReply<u32>;
    fn strength(&self) -> nonblock::MethodReply<u8>;
    fn last_seen(&self) -> nonblock::MethodReply<i32>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> AccessPoint
    for nonblock::Proxy<'a, C>
{
    fn flags(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "Flags",
        )
    }

    fn wpa_flags(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "WpaFlags",
        )
    }

    fn rsn_flags(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "RsnFlags",
        )
    }

    fn ssid(&self) -> nonblock::MethodReply<Vec<u8>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "Ssid",
        )
    }

    fn frequency(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "Frequency",
        )
    }

    fn hw_address(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "HwAddress",
        )
    }

    fn mode(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "Mode",
        )
    }

    fn max_bitrate(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "MaxBitrate",
        )
    }

    fn strength(&self) -> nonblock::MethodReply<u8> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "Strength",
        )
    }

    fn last_seen(&self) -> nonblock::MethodReply<i32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.AccessPoint",
            "LastSeen",
        )
    }
}

#[derive(Debug)]
pub struct AccessPointPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for AccessPointPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for AccessPointPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(AccessPointPropertiesChanged {
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for AccessPointPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.AccessPoint";
}
