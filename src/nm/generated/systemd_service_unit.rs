// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus;
use dbus::arg;
use dbus::nonblock;

pub trait Peer {
    fn ping(&self) -> nonblock::MethodReply<()>;
    fn get_machine_id(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Peer
    for nonblock::Proxy<'a, C>
{
    fn ping(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait Introspectable {
    fn introspect(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Introspectable
    for nonblock::Proxy<'a, C>
{
    fn introspect(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait Properties {
    fn get(
        &self,
        interface: &str,
        property: &str,
    ) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>>;
    fn get_all(
        &self,
        interface: &str,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    >;
    fn set(
        &self,
        interface: &str,
        property: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> nonblock::MethodReply<()>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Properties
    for nonblock::Proxy<'a, C>
{
    fn get(
        &self,
        interface: &str,
        property: &str,
    ) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface, property),
        )
        .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| Ok(r.0))
    }

    fn get_all(
        &self,
        interface: &str,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    > {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface,))
            .and_then(
                |r: (
                    ::std::collections::HashMap<
                        String,
                        arg::Variant<Box<dyn arg::RefArg + 'static>>,
                    >,
                )| Ok(r.0),
            )
    }

    fn set(
        &self,
        interface: &str,
        property: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface, property, value),
        )
    }
}

#[derive(Debug)]
pub struct PropertiesPropertiesChanged {
    pub interface: String,
    pub changed_properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for PropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for PropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(PropertiesPropertiesChanged {
            interface: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for PropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait OrgFreedesktopSystemd1Unit {
    fn start(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn stop(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn reload(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn try_restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn reload_or_restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn reload_or_try_restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn kill(&self, arg0: &str, arg1: i32) -> nonblock::MethodReply<()>;
    fn id(&self) -> nonblock::MethodReply<String>;
    fn names(&self) -> nonblock::MethodReply<Vec<String>>;
    fn documentation(&self) -> nonblock::MethodReply<Vec<String>>;
    fn description(&self) -> nonblock::MethodReply<String>;
    fn load_state(&self) -> nonblock::MethodReply<String>;
    fn active_state(&self) -> nonblock::MethodReply<String>;
    fn sub_state(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> OrgFreedesktopSystemd1Unit
    for nonblock::Proxy<'a, C>
{
    fn start(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call("org.freedesktop.systemd1.Unit", "Start", (arg0,))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn stop(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call("org.freedesktop.systemd1.Unit", "Stop", (arg0,))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn reload(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call("org.freedesktop.systemd1.Unit", "Reload", (arg0,))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call("org.freedesktop.systemd1.Unit", "Restart", (arg0,))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn try_restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call("org.freedesktop.systemd1.Unit", "TryRestart", (arg0,))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn reload_or_restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call("org.freedesktop.systemd1.Unit", "ReloadOrRestart", (arg0,))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn reload_or_try_restart(&self, arg0: &str) -> nonblock::MethodReply<dbus::Path<'static>> {
        self.method_call(
            "org.freedesktop.systemd1.Unit",
            "ReloadOrTryRestart",
            (arg0,),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn kill(&self, arg0: &str, arg1: i32) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.systemd1.Unit", "Kill", (arg0, arg1))
    }

    fn id(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "Id",
        )
    }

    fn names(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "Names",
        )
    }

    fn documentation(&self) -> nonblock::MethodReply<Vec<String>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "Documentation",
        )
    }

    fn description(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "Description",
        )
    }

    fn load_state(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "LoadState",
        )
    }

    fn active_state(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "ActiveState",
        )
    }

    fn sub_state(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.systemd1.Unit",
            "SubState",
        )
    }
}
