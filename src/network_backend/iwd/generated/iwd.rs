// This code was autogenerated with `dbus-codegen-rust -c nonblock -m None --dbuscrate ::dbus -o iwd.rs`, see https://github.com/diwic/dbus-rs
use ::dbus;
use ::dbus::arg;
use ::dbus::nonblock;

pub trait NetConnmanIwdAgentManager {
    fn register_agent(&self, path: dbus::Path) -> nonblock::MethodReply<()>;
    fn unregister_agent(&self, path: dbus::Path) -> nonblock::MethodReply<()>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> NetConnmanIwdAgentManager
    for nonblock::Proxy<'a, C>
{
    fn register_agent(&self, path: dbus::Path) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.iwd.AgentManager", "RegisterAgent", (path,))
    }

    fn unregister_agent(&self, path: dbus::Path) -> nonblock::MethodReply<()> {
        self.method_call("net.connman.iwd.AgentManager", "UnregisterAgent", (path,))
    }
}

pub trait OrgFreedesktopDBusObjectManager {
    fn get_managed_objects(
        &self,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<
            dbus::Path<'static>,
            ::std::collections::HashMap<
                String,
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            >,
        >,
    >;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> OrgFreedesktopDBusObjectManager
    for nonblock::Proxy<'a, C>
{
    fn get_managed_objects(
        &self,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<
            dbus::Path<'static>,
            ::std::collections::HashMap<
                String,
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            >,
        >,
    > {
        self.method_call("org.freedesktop.DBus.ObjectManager", "GetManagedObjects", ())
            .and_then(
                |r: (
                    ::std::collections::HashMap<
                        dbus::Path<'static>,
                        ::std::collections::HashMap<
                            String,
                            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
                        >,
                    >,
                )| Ok(r.0),
            )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusObjectManagerInterfacesAdded {
    pub object_path: dbus::Path<'static>,
    pub interfaces_and_properties: ::std::collections::HashMap<
        String,
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    >,
}

impl arg::AppendAll for OrgFreedesktopDBusObjectManagerInterfacesAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.object_path, i);
        arg::RefArg::append(&self.interfaces_and_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusObjectManagerInterfacesAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusObjectManagerInterfacesAdded {
            object_path: i.read()?,
            interfaces_and_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusObjectManagerInterfacesAdded {
    const NAME: &'static str = "InterfacesAdded";
    const INTERFACE: &'static str = "org.freedesktop.DBus.ObjectManager";
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusObjectManagerInterfacesRemoved {
    pub object_path: dbus::Path<'static>,
    pub interfaces: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusObjectManagerInterfacesRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.object_path, i);
        arg::RefArg::append(&self.interfaces, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusObjectManagerInterfacesRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusObjectManagerInterfacesRemoved {
            object_path: i.read()?,
            interfaces: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusObjectManagerInterfacesRemoved {
    const NAME: &'static str = "InterfacesRemoved";
    const INTERFACE: &'static str = "org.freedesktop.DBus.ObjectManager";
}
