// This code was autogenerated with `dbus-codegen-rust -i org.freedesktop.NetworkManager.Settings. -c nonblock -m None -f Connection, --dbuscrate ::dbus -o connection_nm.rs`, see https://github.com/diwic/dbus-rs
use ::dbus;
use ::dbus::arg;
use ::dbus::nonblock;

pub trait Connection {
    fn update(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> nonblock::MethodReply<()>;
    fn update_unsaved(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> nonblock::MethodReply<()>;
    fn delete(&self) -> nonblock::MethodReply<()>;
    fn get_settings(
        &self,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
    >;
    fn get_secrets(
        &self,
        setting_name: &str,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
    >;
    fn clear_secrets(&self) -> nonblock::MethodReply<()>;
    fn save(&self) -> nonblock::MethodReply<()>;
    fn update2(
        &self,
        settings: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        flags: u32,
        args: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    >;
    fn unsaved(&self) -> nonblock::MethodReply<bool>;
    fn flags(&self) -> nonblock::MethodReply<u32>;
    fn filename(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Connection
    for nonblock::Proxy<'a, C>
{
    fn update(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Update",
            (properties,),
        )
    }

    fn update_unsaved(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "UpdateUnsaved",
            (properties,),
        )
    }

    fn delete(&self) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Delete",
            (),
        )
    }

    fn get_settings(
        &self,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "GetSettings",
            (),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<
                    String,
                    ::std::collections::HashMap<
                        String,
                        arg::Variant<Box<dyn arg::RefArg + 'static>>,
                    >,
                >,
            )| Ok(r.0),
        )
    }

    fn get_secrets(
        &self,
        setting_name: &str,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "GetSecrets",
            (setting_name,),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<
                    String,
                    ::std::collections::HashMap<
                        String,
                        arg::Variant<Box<dyn arg::RefArg + 'static>>,
                    >,
                >,
            )| Ok(r.0),
        )
    }

    fn clear_secrets(&self) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "ClearSecrets",
            (),
        )
    }

    fn save(&self) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Save",
            (),
        )
    }

    fn update2(
        &self,
        settings: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        flags: u32,
        args: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Update2",
            (settings, flags, args),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            )| Ok(r.0),
        )
    }

    fn unsaved(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Unsaved",
        )
    }

    fn flags(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Flags",
        )
    }

    fn filename(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings.Connection",
            "Filename",
        )
    }
}

#[derive(Debug)]
pub struct ConnectionPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for ConnectionPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for ConnectionPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ConnectionPropertiesChanged {
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for ConnectionPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings.Connection";
}

#[derive(Debug)]
pub struct ConnectionUpdated {}

impl arg::AppendAll for ConnectionUpdated {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for ConnectionUpdated {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ConnectionUpdated {})
    }
}

impl dbus::message::SignalArgs for ConnectionUpdated {
    const NAME: &'static str = "Updated";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings.Connection";
}

#[derive(Debug)]
pub struct ConnectionRemoved {}

impl arg::AppendAll for ConnectionRemoved {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for ConnectionRemoved {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(ConnectionRemoved {})
    }
}

impl dbus::message::SignalArgs for ConnectionRemoved {
    const NAME: &'static str = "Removed";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings.Connection";
}
